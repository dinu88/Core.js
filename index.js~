// Hello.
//
// This is JSHint, a tool that helps to detect errors and potential
// problems in your JavaScript code.
//
// To start, simply enter some JavaScript anywhere on this page. Your
// report will appear on the right side.
//
// Additionally, you can toggle specific options in the Configure
// menu.

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var app = {
	// Application Constructor
	initialize: function () {
		this.bindEvents();
	},
	// Bind Event Listeners
	//
	// Bind any events that are required on startup. Common events are:
	// 'load', 'deviceready', 'offline', and 'online'.
	bindEvents: function () {
		document.addEventListener('deviceready', this.onDeviceReady, false);
	},
	// deviceready Event Handler
	//
	// The scope of 'this' is the event. In order to call the 'receivedEvent'
	// function, we must explicity call 'app.receivedEvent(...);'
	onDeviceReady: function () {
		app.receivedEvent('deviceready');
		window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;

	},
	// Update DOM on a Received Event
	receivedEvent: function (id) {
		navigator.splashscreen.hide();
		console.log('Received Event: ' + id);
	}
};

function handleOpenURL(url) {

	console.log('handleUrl');
//	hash = url.split('#')[1];
//	page = hash.split('/')[0];
//	if (page == 'emailConfirm') {
//		console.log('start redirect');
		alert('Email address confirmed. Registration finished')
//		window.location.replace('#' + hash);
//	}
}

showLoader();

Zepto(function ($) {
	Core.routeProvider
			.state('signIn', {controller: signInController, location: 'sign-in'})
			.state('signOut', {controller: signOutController, location: 'sign-in/sign-out'})
			.state('profile', {controller: profileController, location: 'profile'})
			.state('dashboard', {controller: dashboardController, location: 'dashboard/settings/index'})
			.state('profile/:uid', {controller: publicProfileController, location: 'profile/:uid'})
			.state('signUp', {controller: signUpController, location: 'sign-up'})
			.state('emailConfirm', {controller: emailConfirmController, location: 'sign-up/email-confirm/:uid/:token'})
			.state('setPassword', {controller: setPasswordController, location: 'account/set-password'})
			.state('signUpInterests', {controller: signUpInterestsController, location: 'sign-up/interests'})
			.state('search', {controller: searchController, location: 'search'})
			.state('social/share/:objectType/:objectId/:objectOwnerId', {controller: socialShareController, location: 'feeds/share/:objectType/:objectId/:objectOwnerId'})
			.state('social/share/done', {controller: socialShareDoneController})
			.state('messages', {controller: messagesController, location: 'messages/inbox'})
			.state('lastNotifications', {controller: lastNotificationsController, location: 'notifications/last-notifications'})
			.state('conversation/:id', {controller: conversationController, location: 'messages/view-conversation/:id'})
			.state('conversation/:id/send/:sendTo', {controller: sendConversationController, location: 'messages/compose/:id'})
			.state('forgotPassword', {controller: forgotPasswordController, location: 'sign-in/forgot'})
			.state('albums/user/:uid', {controller: userAlbumsController, location: 'albums/user/:uid'})
			.state('followers/:uid', {controller: userFollowersController, location: 'profile/:uid/followers'})
			.state('following/:uid', {controller: userFollowingController, location: 'profile/:uid/following'})
			.state('reviews/:uid', {controller: userReviewsController, location: 'profile/:uid/reviews'})
			.state('trade/:tid/:uid', {controller: tradeController, location: 'trade/index/id/:tid/user/:uid'})
			.state('trade/:tid/:uid/bidHistory', {controller: tradeBidHistoryController, location: '/trade/bid-history/trade/:tid/user/:uid'})
			.state('tradeComments/:tid/:uid', {controller: tradeCommentsController, location: 'trade/comments/id/:tid/user/:uid'})
			.state('tradeComments/addComment', {controller: tradeAddComment})
			.state('addTrade', {controller: addTradeController, location: 'trade/add'})
			.state('addTrade/done', {controller: addTradeDoneController, location: 'trade/add'})
			.state('addTrade/:step', {controller: addTradeItemStepController})
			.state('addTrade/:step/:tradeItemType', {controller: addTradeItemStepController})
			.state('addTrade/:step/done', {controller: addTradeItemStepDoneController})
			.state('addTrade/:step/:tradeItemType/done', {controller: addTradeTypeStepDoneController})
			.state('addTrade/Shippable/:addCountry', {controller: addTradeShippableCountryController})
			.state('addTrade/Shippable/:addCountry/done', {controller: addTradeShippableCountryDoneController})
			.state('addTrade/Payment', {controller: addTradePaymentController})
	Object.defineProperty(window, 'SETTINGS', {value: {}, writable: false});
	for (var key in settings) {
		if (settings.hasOwnProperty(key)) {
			Object.defineProperty(SETTINGS, key, {value: settings[key], writable: false});
		}
	}
	settings = null;
	Core.load();

//	navigator.notification.prompt('Hello Notify', function(){console.log('callback')}, 'Notify', 'Demiss')
	hideLoader();
});
